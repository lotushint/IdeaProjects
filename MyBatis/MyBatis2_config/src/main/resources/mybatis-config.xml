<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//com.lotushint.mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--
    1、mybatis可以使用properties来引入外部properties配置文件的内容；
    resource：引入类路径下的资源
    url：引入网络路径或者磁盘路径下的资源
    -->
    <properties resource="dbconfig.properties"></properties>
    <!--
        2、settings包含很多重要的设置项
        setting:用来设置每一个设置项
            name：设置项名
            value：设置项取值
    -->
    <settings>
        <setting name="mapUnderscoreToCamelCase" value="true"/>
    </settings>
    <!-- 3、typeAliases：别名处理器：可以为我们的java类型起别名
			别名不区分大小写
	-->
    <typeAliases>
        <!-- 1、typeAlias:为某个java类型起别名
                type:指定要起别名的类型全类名;默认别名就是类名小写；employee
                alias:指定新的别名
         -->
        <!-- <typeAlias type="com.lotushint.mybatis.bean.Employee" alias="emp"/> -->

        <!-- 2、package:为某个包下的所有类批量起别名
                name：指定包名（为当前包以及下面所有的后代包的每一个类都起一个默认别名（类名小写））
        -->
        <package name="com.lotushint.mybatis.bean"/>

        <!-- 3、批量起别名的情况下，使用@Alias注解为某个类型指定新的别名 -->
    </typeAliases>
<!--
    4.environments:环境们，mybatis可以配置多种环境，default指定使用某种环境。可以达到快睡切换环境
        environment：配置一个具体的环境信息：必须有两个标签：id代表当前环境的唯一标识
            transactionManager:事务管理器
                type： JDBC | MANAGED | 自定义
                    – JDBC：使用了 JDBC 的提交和回滚设置，依赖于从数据源得到的连接来管理事务范围。JdbcTransactionFactory
                    – MANAGED：不提交或回滚一个连接、让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 ManagedTransactionFactory
                    – 自定义：实现TransactionFactory接口，type=全类名/别名
            dataSource:数据源
                type： UNPOOLED | POOLED | JNDI | 自定义
                    – UNPOOLED：不使用连接池，UnpooledDataSourceFactory
                    – POOLED：使用连接池， PooledDataSourceFactory
                    – JNDI： 在EJB 或应用服务器这类容器中查找指定的数据源
                    – 自定义：实现DataSourceFactory接口，定义数据源的获取方式。
-->
    <environments default="development">
        <environment id="test">
            <transactionManager type=""></transactionManager>
            <dataSource type=""></dataSource>
        </environment>
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>

    <!-- 5、databaseIdProvider：支持多数据库厂商的；
		 type="DB_VENDOR"：VendorDatabaseIdProvider
		 	作用就是得到数据库厂商的标识(驱动getDatabaseProductName())，mybatis就能根据数据库厂商标识来执行不同的sql;
		 	MySQL，Oracle，SQL Server,xxxx
	  -->
    <databaseIdProvider type="DB_VENDOR">
        <!-- 为不同的数据库厂商起别名 -->
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="oracle"/>
        <property name="SQL Server" value="sqlserver"/>
    </databaseIdProvider>
    <!--将我们写好的sql映射文件（EmployeeMapper.xml）一定要映射到全局配置文件中（mybatis-config.xml）-->
    <!-- 6、mappers：将sql映射注册到全局配置中 -->
    <mappers>
        <!--
			mapper:注册一个sql映射
				注册配置文件
				resource：引用类路径下的sql映射文件
					mybatis/mapper/EmployeeMapper.xml
				url：引用网路路径或者磁盘路径下的sql映射文件
					file:///var/mappers/AuthorMapper.xml

				注册接口
				class：引用（注册）接口，
					1、有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下；
					2、没有sql映射文件，所有的sql都是利用注解写在接口上;
					推荐：
						比较重要的，复杂的Dao接口我们来写sql映射文件
						不重要，简单的Dao接口为了开发快速可以使用注解；
		-->
        <!--<mapper resource="mybatis/mapper/EmployeeMapper.xml"/> -->
        <mapper class="com.lotushint.mybatis.dao.EmployeeMapperAnnotation"/>
        <mapper resource="EmployeeMapper.xml"/>
    </mappers>
</configuration>
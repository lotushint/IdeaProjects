<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
						http://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/mvc
						http://www.springframework.org/schema/mvc/spring-mvc.xsd
						http://code.alibabatech.com/schema/dubbo
						http://code.alibabatech.com/schema/dubbo/dubbo.xsd
						http://www.springframework.org/schema/context
						http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/security
                        http://www.springframework.org/schema/security/spring-security.xsd">

    <!--http：用于定义相关权限控制
        指定哪些资源不需要进行权限校验（不登录也可以访问），可以使用通配符-->
    <!--<security:http security="none" pattern="/pages/a.html"/>
    <security:http security="none" pattern="/paegs/b.html"/>-->
<!--    <security:http security="none" pattern="/pages/**"></security:http>-->
    <security:http security="none" pattern="/login.html"/>
    <security:http security="none" pattern="/css/**"/>
    <security:http security="none" pattern="/img/**"/>
    <security:http security="none" pattern="/js/**"/>
    <security:http security="none" pattern="/plugins/**"/>

    <!--http：用于定义相关权限控制
        auto-config：是否自动配置
                        设置为 true 时框架会提供默认的一些配置，例如提供默认的登录页面、登出处理等
                        设置为 false 时需要显示提供登录表单配置，否则会报错
        use-expressions：用于指定 intercept-url 中的 access 属性是否使用表达式 -->
    <security:http auto-config="true" use-expressions="true">
        <security:headers>
            <!--设置在页面可以通过iframe访问受保护的页面，默认为不允许访问-->
            <security:frame-options policy="SAMEORIGIN"></security:frame-options>
        </security:headers>
        <!--intercept-url：定义一个拦截规则
            pattern：对哪些 url 进行权限控制   /**表示拦截所有请求
            access：在请求对应的 URL 时需要什么权限，默认配置时它应该是一个以逗号分隔的角色列表，
				  请求的用户只需拥有其中的一个角色就能成功访问对应的URL -->
        <!--只要认证通过就可以访问-->
        <security:intercept-url pattern="/pages/**"  access="isAuthenticated()" />

        <!-- 如果我们要使用自己指定的页面作为登录页面，必须配置登录表单 -->
        <!-- form-login：定义表单登录信息 -->
        <security:form-login login-page="/login.html"
                             username-parameter="username"
                             password-parameter="password"
                             login-processing-url="/login.do"
                             default-target-url="/pages/main.html"
                             authentication-failure-url="/login.html"/>
        <!-- csrf：对应 CsrfFilter 过滤器
               disabled：是否启用 CsrfFilter 过滤器，如果使用自定义登录页面需要关闭此项，否则登录操作会被禁用（403） -->
        <security:csrf disabled="true"></security:csrf>

        <!--
          logout：退出登录
          logout-url：退出登录操作对应的请求路径
          logout-success-url：退出登录后的跳转页面
        -->
        <security:logout logout-url="/logout.do"
                         logout-success-url="/login.html" invalidate-session="true"/>
    </security:http>

    <!-- 认证管理器，用于处理认证操作 -->
    <security:authentication-manager>
        <!-- 认证提供者，执行具体的认证逻辑 -->
        <security:authentication-provider user-service-ref="springSecurityUserService">
            <!-- user-service：用于获取用户信息，提供给authentication-provider进行认证  -->
            <!--<security:user-service>
                &lt;!&ndash; user：定义用户信息，可以指定用户名、密码、角色，后期可以改为从数据库查询用户信息
				  {noop}：表示当前使用的密码为明文 &ndash;&gt;
                <security:user name="admin"
                               password="{noop}123456"
                               authorities="ROLE_ADMIN"/>
            </security:user-service>-->

            <!--指定密码加密策略-->
            <security:password-encoder ref="passwordEncoder" />
        </security:authentication-provider>
    </security:authentication-manager>

    <!--配置密码加密对象-->
    <bean id="passwordEncoder"
          class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />

    <!--开启注解方式权限控制-->
    <security:global-method-security pre-post-annotations="enabled" />
</beans>